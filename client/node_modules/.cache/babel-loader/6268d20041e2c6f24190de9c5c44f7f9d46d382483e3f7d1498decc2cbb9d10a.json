{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  mode: \"light\",\n  user: null,\n  token: null,\n  posts: []\n};\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    setLogin: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n    setLogout: state => {\n      state.user = null;\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      if (state.user) {\n        const {\n          friends\n        } = action.payload;\n\n        // Prevent making the logged-in user a friend of themselves\n        if (friends.some(friend => friend._id === state.user._id)) {\n          console.error(\"Cannot make yourself a friend.\");\n          return;\n        }\n        state.user.friends = friends;\n      } else {\n        console.error(\"User friends non-existent :(\");\n      }\n    },\n    setPosts: (state, action) => {\n      state.posts = action.payload.posts.reverse();\n    },\n    setPost: (state, action) => {\n      const updatedPosts = state.posts.map(post => {\n        if (post._id === action.payload.post._id) return action.payload.post;\n        return post;\n      });\n      state.posts = updatedPosts;\n    },\n    deletePost: (state, action) => {\n      const postIdToDelete = action.payload._id; // Use action.payload._id\n      state.posts = state.posts.filter(post => post._id !== postIdToDelete);\n    },\n    addComment: (state, action) => {\n      const {\n        postId,\n        comment\n      } = action.payload;\n      const postToUpdate = state.posts.find(post => post._id === postId);\n      if (postToUpdate) {\n        postToUpdate.comments.push(comment);\n      }\n    }\n  }\n});\nexport const {\n  setMode,\n  setLogin,\n  setLogout,\n  setFriends,\n  setPosts,\n  setPost,\n  deletePost\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","mode","user","token","posts","authSlice","name","reducers","setLogin","state","action","payload","setLogout","setFriends","friends","some","friend","_id","console","error","setPosts","reverse","setPost","updatedPosts","map","post","deletePost","postIdToDelete","filter","addComment","postId","comment","postToUpdate","find","comments","push","setMode","actions","reducer"],"sources":["/Users/hardikdaim/Desktop/Krishi-Mitra/client/src/state/index.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = {\n  mode: \"light\",\n  user: null,\n  token: null,\n  posts: [],\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n \n    setLogin: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n    setLogout: (state) => {\n      state.user = null;\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      if (state.user) {\n        const { friends } = action.payload;\n        \n        // Prevent making the logged-in user a friend of themselves\n        if (friends.some(friend => friend._id === state.user._id)) {\n          console.error(\"Cannot make yourself a friend.\");\n          return;\n        }\n    \n        state.user.friends = friends;\n      } else {\n        console.error(\"User friends non-existent :(\");\n      }\n    },\n    \n    setPosts: (state, action) => {\n      state.posts = action.payload.posts.reverse();\n    },\n    setPost: (state, action) => {\n      const updatedPosts = state.posts.map((post) => {\n        if (post._id === action.payload.post._id) return action.payload.post;\n        return post;\n      });\n      state.posts = updatedPosts;\n    },\n    deletePost: (state, action) => {\n      const postIdToDelete = action.payload._id; // Use action.payload._id\n      state.posts = state.posts.filter((post) => post._id !== postIdToDelete);\n    },\n    addComment: (state, action) => {\n      const { postId, comment } = action.payload;\n      const postToUpdate = state.posts.find((post) => post._id === postId);\n      if (postToUpdate) {\n        postToUpdate.comments.push(comment);\n      }\n    },\n  },\n});\n\nexport const { setMode, setLogin, setLogout, setFriends, setPosts, setPost , deletePost } =\n  authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}