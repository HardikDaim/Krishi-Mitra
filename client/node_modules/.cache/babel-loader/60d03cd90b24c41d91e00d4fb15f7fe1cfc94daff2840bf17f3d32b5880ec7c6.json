{"ast":null,"code":"var _jsxFileName = \"/Users/hardikdaim/Desktop/Krishi-Mitra/client/src/components/widgets/PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"../../state/index.js\";\nimport PostWidget from \"./PostWidget\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = ({\n  userId,\n  isProfile = false\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const getPosts = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:4000/posts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      const reversedData = data.reverse();\n      dispatch(setPosts({\n        posts: reversedData\n      }));\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getUserPosts = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:4000/posts/${userId}/posts`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      const reversedData = data.reverse();\n      dispatch(setPosts({\n        posts: reversedData\n      }));\n    } catch (error) {\n      console.error(\"Error fetching user posts:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n\n    // Automatically refresh the data every 5 minutes (adjust as needed)\n    const refreshInterval = setInterval(() => {\n      if (!isLoading) {\n        if (isProfile) {\n          getUserPosts();\n        } else {\n          getPosts();\n        }\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => {\n      // Clean up the interval on unmount\n      clearInterval(refreshInterval);\n    };\n  }, [isProfile, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : posts.map(({\n      _id,\n      userId,\n      firstName,\n      lastName,\n      description,\n      location,\n      picturePath,\n      userPicturePath,\n      likes,\n      comments\n    }) => /*#__PURE__*/_jsxDEV(PostWidget, {\n      postId: _id,\n      postUserId: userId,\n      name: `${firstName} ${lastName}`,\n      description: description,\n      location: location,\n      picturePath: picturePath,\n      userPicturePath: userPicturePath,\n      likes: likes,\n      comments: comments\n    }, _id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n};\n_s(PostsWidget, \"gifafrNP1ZuCvDsnZw176ys4ZcU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","setPosts","PostWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","PostsWidget","userId","isProfile","_s","dispatch","posts","state","token","isLoading","setIsLoading","getPosts","response","fetch","method","headers","Authorization","data","json","reversedData","reverse","error","console","getUserPosts","refreshInterval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments","postId","postUserId","name","_c","$RefreshReg$"],"sources":["/Users/hardikdaim/Desktop/Krishi-Mitra/client/src/components/widgets/PostsWidget.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"../../state/index.js\";\nimport PostWidget from \"./PostWidget\";\n\nconst PostsWidget = ({ userId, isProfile = false }) => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.posts);\n  const token = useSelector((state) => state.token);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getPosts = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:4000/posts\", {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data = await response.json();\n      const reversedData = data.reverse();\n      dispatch(setPosts({ posts: reversedData }));\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getUserPosts = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\n        `http://localhost:4000/posts/${userId}/posts`,\n        {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const data = await response.json();\n      const reversedData = data.reverse();\n      dispatch(setPosts({ posts: reversedData }));\n    } catch (error) {\n      console.error(\"Error fetching user posts:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n\n    // Automatically refresh the data every 5 minutes (adjust as needed)\n    const refreshInterval = setInterval(() => {\n      if (!isLoading) {\n        if (isProfile) {\n          getUserPosts();\n        } else {\n          getPosts();\n        }\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => {\n      // Clean up the interval on unmount\n      clearInterval(refreshInterval);\n    };\n  }, [isProfile, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        posts.map(\n          ({\n            _id,\n            userId,\n            firstName,\n            lastName,\n            description,\n            location,\n            picturePath,\n            userPicturePath,\n            likes,\n            comments,\n          }) => (\n            <PostWidget\n              key={_id}\n              postId={_id}\n              postUserId={userId}\n              name={`${firstName} ${lastName}`}\n              description={description}\n              location={location}\n              picturePath={picturePath}\n              userPicturePath={userPicturePath}\n              likes={likes}\n              comments={comments}\n            />\n          )\n        )\n      )}\n    </>\n  );\n};\n\nexport default PostsWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}