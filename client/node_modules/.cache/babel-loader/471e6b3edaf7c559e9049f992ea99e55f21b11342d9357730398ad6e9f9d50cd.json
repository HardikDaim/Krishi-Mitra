{"ast":null,"code":"var _jsxFileName = \"/Users/hardikdaim/Desktop/Krishi-Mitra/client/src/components/widgets/PostWidget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPost } from \"../../state/index.js\";\nimport { addComment } from \"../../state/index.js\";\nimport CircularProgress from \"@mui/material/CircularProgress\"; // Import the loading indicator component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostWidget = ({\n  postId,\n  postUserId,\n  name,\n  description,\n  location,\n  picturePath,\n  userPicturePath,\n  likes,\n  comments: initialComments\n}) => {\n  _s();\n  const [isComments, setIsComments] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false); // Local state for loading indicator\n  const [commentAdded, setCommentAdded] = useState(false); // Local state for success message\n  const dispatch = useDispatch();\n  const token = useSelector(state => state.token);\n  const loggedInUserId = useSelector(state => state.user._id);\n  const isLiked = likes ? Boolean(likes[loggedInUserId]) : false;\n  const likeCount = likes ? Object.keys(likes).length : 0;\n  const [comments, setComments] = useState(initialComments || []);\n  const patchLike = async () => {\n    const response = await fetch(`http://localhost:4000/posts/${postId}/like`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId: loggedInUserId\n      })\n    });\n    const updatedPost = await response.json();\n    dispatch(setPost({\n      post: updatedPost\n    }));\n  };\n  const handleCommentSubmit = async () => {\n    if (!commentText.trim()) return; // Don't submit empty comments\n\n    setIsLoading(true); // Set loading indicator to true while sending the comment\n\n    const response = await fetch(`http://localhost:4000/posts/${postId}/comment`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId: loggedInUserId,\n        text: commentText\n      })\n    });\n    if (response.ok) {\n      const newComment = await response.json();\n\n      // Dispatch the addComment action to update the Redux store\n      dispatch(addComment({\n        postId,\n        comment: newComment\n      }));\n\n      // Clear the comment input\n      setCommentText(\"\");\n      setCommentAdded(true); // Set commentAdded to true to display success message\n    } else {\n      // Handle error response from the server\n      console.error(\"Failed to create a comment.\");\n    }\n    setIsLoading(false); // Reset loading indicator\n  };\n\n  return /*#__PURE__*/_jsxDEV(WidgetWrapper, {\n    m: \"2rem 0\",\n    children: isComments && /*#__PURE__*/_jsxDEV(Box, {\n      mt: \"0.5rem\",\n      children: [comments.map((comment, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            m: \"0.5rem 0\",\n            pl: \"1rem\"\n          },\n          children: comment.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)]\n      }, `${comment.userId}-${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Write a comment\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: commentText,\n          onChange: e => setCommentText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: handleCommentSubmit,\n          style: {\n            marginLeft: \"8px\",\n            cursor: \"pointer\"\n          },\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this) : commentAdded ? /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"green\"\n            },\n            children: \"Comment added successfully!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(PostWidget, \"Ys3pAyUSlsXn6hs28gwkLobKZRE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostWidget;\nvar _c;\n$RefreshReg$(_c, \"PostWidget\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","setPost","addComment","CircularProgress","jsxDEV","_jsxDEV","PostWidget","postId","postUserId","name","description","location","picturePath","userPicturePath","likes","comments","initialComments","_s","isComments","setIsComments","commentText","setCommentText","isLoading","setIsLoading","commentAdded","setCommentAdded","dispatch","token","state","loggedInUserId","user","_id","isLiked","Boolean","likeCount","Object","keys","length","setComments","patchLike","response","fetch","method","headers","Authorization","body","JSON","stringify","userId","updatedPost","json","post","handleCommentSubmit","trim","text","ok","newComment","comment","console","error","WidgetWrapper","m","children","Box","mt","map","i","Divider","fileName","_jsxFileName","lineNumber","columnNumber","Typography","sx","pl","display","alignItems","TextField","label","variant","fullWidth","value","onChange","e","target","onClick","style","marginLeft","cursor","size","color","SendIcon","_c","$RefreshReg$"],"sources":["/Users/hardikdaim/Desktop/Krishi-Mitra/client/src/components/widgets/PostWidget.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPost } from \"../../state/index.js\";\nimport { addComment } from \"../../state/index.js\"; \nimport CircularProgress from \"@mui/material/CircularProgress\"; // Import the loading indicator component\n\nconst PostWidget = ({\n  postId,\n  postUserId,\n  name,\n  description,\n  location,\n  picturePath,\n  userPicturePath,\n  likes,\n  comments: initialComments,\n}) => {\n  const [isComments, setIsComments] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false); // Local state for loading indicator\n  const [commentAdded, setCommentAdded] = useState(false); // Local state for success message\n  const dispatch = useDispatch();\n  const token = useSelector((state) => state.token);\n  const loggedInUserId = useSelector((state) => state.user._id);\n  const isLiked = likes ? Boolean(likes[loggedInUserId]) : false;\n  const likeCount = likes ? Object.keys(likes).length : 0;\n  const [comments, setComments] = useState(initialComments || []);\n\n  const patchLike = async () => {\n    const response = await fetch(`http://localhost:4000/posts/${postId}/like`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ userId: loggedInUserId }),\n    });\n    const updatedPost = await response.json();\n    dispatch(setPost({ post: updatedPost }));\n  };\n\n  const handleCommentSubmit = async () => {\n    if (!commentText.trim()) return; // Don't submit empty comments\n\n    setIsLoading(true); // Set loading indicator to true while sending the comment\n\n    const response = await fetch(\n      `http://localhost:4000/posts/${postId}/comment`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ userId: loggedInUserId, text: commentText }),\n      }\n    );\n\n    if (response.ok) {\n      const newComment = await response.json();\n\n      // Dispatch the addComment action to update the Redux store\n      dispatch(addComment({ postId, comment: newComment }));\n\n      // Clear the comment input\n      setCommentText(\"\");\n      setCommentAdded(true); // Set commentAdded to true to display success message\n    } else {\n      // Handle error response from the server\n      console.error(\"Failed to create a comment.\");\n    }\n\n    setIsLoading(false); // Reset loading indicator\n  };\n\n  return (\n    <WidgetWrapper m=\"2rem 0\">\n      {/* ... (unchanged) */}\n      {isComments && (\n        <Box mt=\"0.5rem\">\n          {comments.map((comment, i) => (\n            <div key={`${comment.userId}-${i}`}>\n              <Divider />\n              <Typography sx={{ m: \"0.5rem 0\", pl: \"1rem\" }}>\n                {comment.text}\n              </Typography>\n            </div>\n          ))}\n          <Divider />\n          <Box display=\"flex\" alignItems=\"center\">\n            <TextField\n              label=\"Write a comment\"\n              variant=\"outlined\"\n              fullWidth\n              value={commentText}\n              onChange={(e) => setCommentText(e.target.value)}\n            />\n            <div\n              onClick={handleCommentSubmit}\n              style={{ marginLeft: \"8px\", cursor: \"pointer\" }}\n            >\n              {/* Conditionally render loading indicator or success message */}\n              {isLoading ? (\n                <CircularProgress size={24} color=\"primary\" />\n              ) : commentAdded ? (\n                <span style={{ color: \"green\" }}>Comment added successfully!</span>\n              ) : (\n                <SendIcon />\n              )}\n            </div>\n          </Box>\n        </Box>\n      )}\n    </WidgetWrapper>\n  );\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}